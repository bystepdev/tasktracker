{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<style>\n  .site-name {\n    text-align: center;\n    margin-bottom: 5%;\n  }\n  .task-name {\n    float : left;\n    margin-left : 5%;\n  }\n  .flex {\n    height: 1px;\n    clear: both;\n  }\n  .comment {\n    float : right;\n    margin-right : 10px;\n    border: 0px;\n    background: white;\n    margin-top: 2%;\n    vertical-align:bottom;\n    text-align: justify;\n    color : grey;\n  }\n  .table {\n    background: rgb(204, 204, 204, 0.5);\n    box-shadow: 20px 20px 10px 5px rgba(0, 0, 0, .2);\n    width: 35%;\n    height: auto;\n    margin-left : 10%;\n    margin-top : 5%;\n    float: left;\n    border-radius: 10px;\n    border : 1px solid #000;\n  }\n  .task {\n    height: auto;\n  }\n  .savehandle {\n    margin-top: 2%;\n    float: left;\n    margin-left: 3%;\n  }\n  .test {\n    margin-left: 5%;\n    float : left;\n  }\n  #reload {\n    float : right;\n    margin-right: 5%;\n  }\n  .comment-box {\n    height: auto;\n    width: 90%;\n    resize : vertical;\n    margin-left: 5%;\n  }\n  .verdict {\n    float: right;\n    margin-right: 5%;\n    color : red;\n  }\n  #addtask {\n    float : right;\n    margin-right : 5%;\n  }\n  #auto {\n    margin-top: 0%;\n    width: 100%;\n    height: auto;\n    background: #996699;\n    border-radius: 10px;\n    box-shadow: 20px 20px 10px 5px rgba(0, 0, 0, .2);\n  }\n  #taskurl {\n    float : right;\n    width: 90%;\n    margin-right : 5%;\n    border-radius: 10px;\n  }\n  #user-info {\n    font-size: 1.5em;\n    margin-top: 0%;\n    font-weight: 600;\n    text-align: center;\n  }\n  #taskname {\n    float: right;\n    width: 90%;\n    margin-right : 5%;\n    border-radius: 10px;\n    margin-right: 5%;\n  }\n  .log {\n    margin-top: 2%;\n    float: left;\n    margin-left: 3%;\n  }\n  .logdiv {\n    margin-left: auto;\n    margin-right: auto;\n    position: centre;\n  }\n  .login-err {\n    color : red;\n    margin-left: 3%;\n    margin-top: 0%;\n    font-size: 0.8em;\n  }\n  .save-comment {\n    float: right;\n    margin-right: 5%;\n  }\n  #logout {\n    float: right;\n    margin-top: 2.5%;\n    margin-right: 3%;\n  }\n  button {\n    color: #000 !important;\n    text-transform: uppercase;\n    text-decoration: none;\n    background: #fff;\n    font-size: 0.8em;\n    padding: 9px;\n    border-radius: 5px;\n    display: inline-block;\n    border: none;\n    transition: all 0.4s ease 0s;\n  }\n  .table > button{\n    background: rgba(204, 204, 204, 0);\n  }\n  .task > button {\n    background: rgba(204, 204, 204, 0);\n  }\n  button:hover {\n    background: #996699;\n    letter-spacing: 1px;\n    -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);\n    -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);\n    box-shadow: 5px 40px -10px rgba(0,0,0,0.57);\n    transition: all 0.4s ease 0s;\n  }\n  .task > .delete:hover {\n    height: 18px;\n    width: 18px;\n    transition: all 0.4s ease 0s;\n  }\n  .task > .delete {\n    float: right;\n    margin-right: 5%;\n    height: 14px;\n    width: 14px;\n    \n    transition: all 0.4s ease 0s;\n  }\n  input {\n    border-radius: 10px;\n  }\n  .bottom {\n    margin-top: 25%;\n    text-align: center;\n    font-size: 1em;\n    margin-bottom: 0xp;\n  }\n</style>\n\n<script>\n  import { MD5 } from \"./md5.js\"\n  // создает уникальный id мс с начала эпохи\n  function getUniq() { \n    let f = new Date();\n    return f.getTime();\n  }\n  const api = \"http://localhost:8080\"; // api сервера к которому будем обращаться\n  $: openComment = new Set();\n  // открытие и закрытие комментария, их номера хранятся в openComment\n  function handleClick(x) {\n    x = Number(x);\n    if (openComment.has(x)) {\n      openComment.delete(x);\n    }\n    else {\n      openComment.add(x);\n    }\n    openComment = openComment;\n  }\n  let name = ''; // handle\n  $: res = []; // список задач с CF\n  \n  let num = 0; // для нумерации комментов\n  let add = false; // для открытия понели добавления задач\n  let taskurl = ''; // поле ввода ссылки на задачу\n  let taskname = ''; // поле ввода имени задачи\n  let clienttask = []; // задачи пользователя\n  let result = ''; // ошибка если некоректно ввели данные задачи\n  let call = false;\n\n  // удаление задачи с CF, чтобы потом понять, что эту задачу удалили, мы ставим ей result = -1\n  async function problemCfDelete(x) { \n    let backup = res[x];\n    let prob_id = backup[6];\n    await fetch(api + \"/cf_problems/\" + bd_id + '/' + prob_id, {\n      method: 'DELETE',\n    }).catch(error => {console.log(error)});\n\n    const problem_add = {\n              \"id\": String(getUniq()),\n              \"name\": String(backup[1]),\n              \"link\": backup[0],\n              \"result\": '-1',\n              \"comment\": String(backup[5])\n          }\n    await fetch(api + \"/cf_problems/\" + bd_id, {\n             method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(problem_add)\n            }).catch(error => {console.log(error)}); \n    res.splice(x, 1);\n    res = res;\n  }\n\n  // удаление задачи пользователя\n  async function userProblemDelete(x) { \n    let prob_id = clienttask[x][4];\n    fetch(api + \"/user_problems/\" + bd_id + '/' + prob_id, {\n      method: 'DELETE',\n    }).catch(error => {console.log(error)});\n    clienttask.splice(x, 1);\n    clienttask = clienttask;\n  }\n\n  // сохранение комментария для задач пользователя\n  async function saveUserProblem(x) { \n    //удаление из бд данных о старой задаче и создание новой\n    let backup = clienttask[x];\n    let prob_id = clienttask[x][4];\n    await fetch(api + \"/user_problems/\" + bd_id + '/' + prob_id, {\n      method: 'DELETE',\n    }).catch(error => {console.log(error)});\n\n    const problem_add = {\n            \"id\": backup[4],\n            \"name\": backup[1],\n            \"link\": backup[0],\n            \"comment\": backup[3]\n          }\n    await fetch(api + \"/user_problems/\" + bd_id, {\n             method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(problem_add)\n            }).catch(error => {console.log(error)});      \n    handleClick(backup[2]);     \n  }\n\n   // сохранение комметария задачи с CF аналогия с задачами пользователя\n  async function saveCfProblem(x) {\n    // repeat func выше\n    let backup = res[x];\n    let prob_id = backup[6];\n    await fetch(api + \"/cf_problems/\" + bd_id + '/' + prob_id, {\n      method: 'DELETE',\n    }).catch(error => {console.log(error)});\n    const newProb = {\n              \"id\": String(getUniq()),\n              \"name\": String(backup[1]),\n              \"link\": backup[0],\n              \"result\": String(backup[2]) + ' ' + String(backup[3]),\n              \"comment\": String(backup[5])\n            }\n            await fetch(api + \"/cf_problems/\" + bd_id, {\n             method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(newProb)\n            }).catch(error => {console.log(error)});\n    handleClick(backup[4]);        \n  }\n  \n  // добавление задачи пользователя\n  function blockAdd() { \n      if (!add) {\n        add = true;\n      } else {\n        if (taskurl.length == 0 && taskname == 0) {\n          add = false;\n          return;\n        }\n        if (taskurl.length == 0) {\n          result = 'Добавьте ссылку на задачу';\n          call = true;\n          return;\n        }\n        if (taskname.length == 0) {\n          result = 'Добавьте название задачи';\n          call = true;\n          return;\n        }\n        const problem_add = {\n            \"id\": String(getUniq()),\n            \"name\": taskname,\n            \"link\": taskurl,\n            \"comment\": ''\n          }\n          fetch(api + \"/user_problems/\" + bd_id, {\n             method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(problem_add)\n            })\n            \n            .then(response => response.json())\n            .then(new_prob => {\n              // ссылка на задачу, название, номер для открытие коммента, комментарий, index в бд\n              let fl = [taskurl, taskname, Number(num), '', new_prob.id];\n              num = num + 1;\n              clienttask.unshift(fl);\n              clienttask = clienttask;\n              taskurl = '';\n              taskname = '';\n              call = false;\n              add = false;}).catch(error => {console.log(error)});    \n        }\n  }\n\n  // загружает задачи пользователя из бд\n  async function updClientTask() {\n      fetch(api + '/user_problems/' + bd_id).then(response => {\n                                return response.json();\n                                })\n                                .then(response => {\n                                  for (let i = response.length - 1; i >= 0; i--) {\n                                    let element = [response[i].link, response[i].name, Number(num), '', response[i].id];\n                       \n                                    num++;\n                                    if (response[i].comment != undefined) {\n                                      element[3] = response[i].comment;\n                               \n                                    }\n                                    clienttask.unshift(element);\n                                  }\n                                  clienttask = clienttask;\n                                })\n                                .catch(error => {{console.log('Задач пользователя нет')}});\n      \n  }\n\n  let reload_err = 'Обновить'; // состояние кнопки обновления\n\n  // обновление списка задач codeforces\n  async function updCfProblems() { \n    reload_err = 'Обновлнение...';\n    let url = 'https://codeforces.com/api/user.status?handle=' + name + '&from=1&count=10000';\n    let response = await fetch(url).catch(error => { // запрос к Codeforces\n      reload_err = 'Обновить';\n\n    });\n    let newCfProblems = await response.json();\n    if (response.ok) {\n        let dbCfProblems = undefined;\n        await fetch(api + '/cf_problems/' + bd_id).then(response => {return response.json()}).then(dbdb => { // запрос к бд\n          dbCfProblems = dbdb;\n        }).catch(error => {reload_err = 'Обновить'; console.log(error);});\n        console.log('ok');\n        let us = new Set();\n        let ok = new Set();\n        let map = new Map();\n        let buffer = [];\n        let Comments = new Map();\n        let Ids = new Map();\n        console.log(newCfProblems.result);\n        for (let element of newCfProblems.result) { // записывает все нерешенные задачи с codeforces\n          let problem = element.problem;\n          let name = String(element.problem.contestId) + '/problem/' + String(element.problem.index);\n          if (String(element.verdict) != 'OK' && !us.has(name)) {\n              us.add(name);\n              buffer.push([name, element.problem.name, Number(element.passedTestCount), String(element.verdict)]);\n          } else {\n            ok.add(name);\n          }\n        }\n        while (res.length > 0) { // чистит список задач с Cf\n          res.pop();\n        }\n\n        let notSolvedTasks = [];\n        for (let element of buffer) { // генерирует список нерешенных задач\n          let name = element[0];\n          if (us.has(name) && !ok.has(name)) {\n            us.delete(name);\n            let add = element;\n            element.push(num);\n            element.push('');\n            element.push('');\n            num += 1;\n            notSolvedTasks.unshift(element);\n          }\n        }\n\n        let setDbProblems = new Set();\n        let delTasks = new Set();\n        if (dbCfProblems != undefined) {\n          for (let i = 0; i < dbCfProblems.length; i++) {\n            setDbProblems.add(dbCfProblems[i].link);\n            Comments.set(dbCfProblems[i].link, dbCfProblems[i].comment);\n            Ids.set(dbCfProblems[i].link, dbCfProblems[i].id);\n            if (dbCfProblems[i].result === '-1') {\n              delTasks.add(dbCfProblems[i].link);\n            }\n          }\n        }\n\n        let addTask = [];\n        for (let i = 0; i < notSolvedTasks.length; i++) {\n          let element = notSolvedTasks[i];\n          let taskLink = element[0];\n          if (!setDbProblems.has(taskLink)) {\n            addTask.unshift(element);\n          } else {\n            if (Comments.get(element[0]) != undefined) {\n              element[5] = Comments.get(element[0]);\n            } else {\n              element[5] = '';\n            }\n            element[6] = Ids.get(element[0]);\n            if (!delTasks.has(element[0]))\n              res.unshift(element);\n          }\n        }\n\n        res = res;\n        for (let i = addTask.length - 1; i >= 0; i--) {\n          let element = addTask[i];\n          reload_err = 'Обновление...';\n          const newProb = {\n              \"id\": String(getUniq()),\n              \"name\": String(element[1]),\n              \"link\": element[0],\n              \"result\": String(element[2]) + ' ' + String(element[3]),\n              \"comment\": ''\n            }\n            fetch(api + \"/cf_problems/\" + bd_id, {\n             method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(newProb)\n            }).then(response => {response.json()}).then(response => {\n              reload_err = 'Обновить';\n              res.unshift(element);\n              res = res;\n            });\n        }\n        reload_err = 'Обновить';\n    } else {\n      reload_err = 'Обновить';\n      alert(\"Ошибка HTTP: \" + response.status);\n    }\n  }\n  \n  let login = 0; // состояние авторизации \n  let mail = ''; // логин\n  let password = ''; // пароль\n  let bd_id = ''; // id пользователя\n  let login_err = ''; // сообщение о проблемах со входом\n  let reg_err = ''; // сообщение о проблеме с регистрацией\n\n  // регистрация\n  async function UserReg() { \n    reg_err = '';\n    if (mail != '' && password != '') {\n      let goodAsk = true;\n      let response = await fetch(api + '/user/' + mail).catch(error => {goodAsk = false;});\n      \n      if (!goodAsk) {\n        reg_err = 'Какие-то проблемы, попробуйте позже';\n        return;\n      }\n      if (response.ok) {\n        reg_err = 'Такой логин уже существует';\n      } else {\n        login = 3;\n      }\n    } else {\n      reg_err = 'Неверный формал логина или пароля';\n    }\n  }\n\n  // кнопка регистрации\n  function Registr() {\n    login = 2;\n  }\n  let save_err = '';\n  // сохранение хэндла и окончание регистрации\n  async function saveHandle() { \n    save_err = '';\n    let url = 'https://codeforces.com/api/user.info?handles=' + name;\n    let goodAsk = true;\n    let response = await fetch(url).catch(error => {goodAsk = false;});\n    if (!goodAsk) {\n      save_err = 'Что-то пошло не так, проверьте вводимый Хэндл';\n      return;\n    }\n    if (response.ok) {\n    const user = {\n      \"handle\": name,\n      \"mail\": mail,\n      \"password\": MD5(password)\n    }\n    fetch(api + \"/user\", {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n      })\n      .then(response => response.json())\n      .then(new_user => {\n        login = 0;\n        save_err = '';\n        login_err = 'Регистрация прошла успешно!';\n      })\n      .catch(error => {\n        save_err = 'Технические шоколадки';\n      })\n    } else {\n      save_err = 'Что-то пошло не так, проверьте вводимый Хэндл';\n    }\n  }\n  // авторизация и проверка пароля логина\n  async function UserLogin() { \n    login_err = '';\n    if (mail != '' && password != '') {\n      let res = await fetch(api + '/user/' + mail).catch(error => {login_err = 'Технические шоколадки'});\n      if (login_err == '') {\n        if (!res.ok) {\n          login_err = 'Такого логина не существует';\n        } else {\n      fetch(api + '/user/' + mail).then(response => {\n                                return response.json();\n                                })\n                                .then(response => {\n\n                                    if (MD5(password) == response.password) {\n                                      password = '';\n                                      name = response.handle;\n                                      bd_id = response.id;\n                                      updClientTask();\n                                      updCfProblems();\n                                      login = 1;\n                                    } else {\n                                      login_err = 'Неверный пароль';\n                                    }\n                                \n                                })\n                                .catch(error => {login_err = 'Технические шоколадки'});\n        }\n      }\n      \n    } else {\n        login_err = 'Неверный формат';\n    }\n  }\n\n  // выход из аккаунта\n  function logout() { \n    res.splice(0, res.length);\n    clienttask.splice(0, clienttask.length);\n    mail = '';\n    name = '';\n    password = '';\n    login = 0;\n  }\n</script>\n\n\n\n<div id=\"auto\">\n  {#if login == 0} \n    <div class=\"logdiv\"> \n      <input class=\"log\" bind:value={mail} placeholder=\"логин\"> \n      <input class=\"log\" type=\"password\" bind:value={password} placeholder=\"пароль\">\n      <button class=\"log\" on:click=\"{() => UserLogin()}\">\n              Войти\n          </button>\n      <button class=\"log\" on:click=\"{() => Registr()}\"> Регистрация </button>    \n      <div class = \"flex\"> </div>\n      {#if login_err != ''} \n      <p class=\"login-err\">{login_err}</p>\n      {/if}    \n    </div>\n  {/if}\n  {#if login === 1}\n    <button id=\"logout\" on:click=\"{() => logout()}\">Выйти</button>\n    <p id=\"user-info\"> Пользователь: {mail} </p>\n  {/if}\n  {#if login == 2} \n    <div class=\"logdiv\"> \n      <input class=\"log\" bind:value={mail} placeholder=\"логин\"> \n      <input class=\"log\" type=\"password\" bind:value={password} placeholder=\"пароль\">\n      <button class=\"log\" on:click=\"{() => UserReg()}\">\n              Зарегистрироваться\n          </button>\n      <div class = \"flex\"> </div>    \n      {#if reg_err != ''} \n        <p class=\"login-err\">{reg_err}</p>\n      {/if}    \n    </div>\n  {/if}\n  {#if login == 3} \n    <div class=\"logdiv\">\n    <input class=\"savehandle\" bind:value={name} placeholder=\"Ваш хэндл?\">\n    <button class=\"savehandle\" on:click=\"{() => saveHandle()}\"> Сохранить </button>\n    <div class = \"flex\"> </div>\n    <p class=\"login-err\">{save_err}</p>\n    </div>\n  {/if}\n  <br>\n</div>\n\n\n<div class = \"table\">\n  <p class = \"site-name\"> Codeforces </p>\n  {#if login == 1}  <button id = \"reload\" on:click=\"{() => updCfProblems()}\">\n    {reload_err}\n  </button>\n  {/if}\n  <div class = \"flex\"> </div>\n  {#if res.length > 0}\n    {#each res as ar, i}\n          <hr/>\n        <div class = \"task\">\n          <a target=\"_blank\" class = \"task-name\" href = \"https://codeforces.com/contest/{ar[0]}\"> {ar[1]} </a>\n          <img src=\"secdel.png\" on:click=\"{() => problemCfDelete(i)}\" alt = \"удалить\" class = \"delete\">\n          <div class = \"flex\"> </div>\n          <p class = \"test\"> Номер теста {ar[2] + 1} </p>\n          <p class = \"verdict\"> {ar[3]} </p>\n          <div class = \"flex\"> </div>\n          <button class = \"comment\" on:click=\"{() => handleClick(ar[4])}\">\n              комментарий\n          </button>\n          <div class = \"flex\"> </div>\n          {#if openComment.has(ar[4]) === true}\n            <textarea bind:value={ar[5]} wrap = \"soft\" class = \"comment-box\" placeholder=\"комментарий\"></textarea>\n            \n            <button class=\"save-comment\" on:click=\"{() => saveCfProblem(i)}\"> Сохранить </button>\n          {/if}\n          <div class = \"flex\"> </div>\n        </div>\n    {/each}\n  {/if}  \n</div>\n\n<div class = \"table\">\n  <p class = \"site-name\"> Мои задачи</p>\n  {#if login == 1}\n  <button id = \"addtask\" on:click=\"{() => blockAdd()}\">\n    Добавить задачу\n  </button>\n  {/if}\n  {#if add}\n    <input bind:value={taskurl} id = \"taskurl\" type=\"url\" placeholder=\"Ссылка на задачу\">\n    <input bind:value={taskname} id = \"taskname\" type=\"text\" placeholder=\"Название задачи\">\n    <br>\n  {/if}\n  {#if call}\n        <p color=\"red\">{result}</p>\n  {/if}\n  <div class = \"flex\"> </div>\n  {#if clienttask.length > 0} \n      {#each clienttask as ar, i}\n          <hr/>\n        <div class = \"task\">\n          <a target=\"_blank\" class = \"task-name\" href = \"{ar[0]}\"> {ar[1]} </a>\n          <img src=\"secdel.png\" on:click=\"{() => userProblemDelete(i)}\" alt = \"удалить\" border-radius = \"50%\" class = \"delete\">\n          <div class = \"flex\"> </div>\n          <button class = \"comment\" on:click=\"{() => handleClick(ar[2])}\">\n              комментарий\n          </button>\n          <div class = \"flex\"> </div>\n          {#if openComment.has(ar[2]) === true}\n          \n            <textarea bind:value={ar[3]} wrap = \"soft\" class = \"comment-box\" placeholder=\"комментарий\"></textarea>\n            <button class=\"save-comment\" on:click=\"{() => saveUserProblem(i)}\"> Сохранить </button>\n          {/if}\n          <div class = \"flex\"> </div>\n        </div>\n    {/each}\n    {/if}\n</div>\n<div class = \"flex\"> </div>\n<div class=\"bottom\"> \n        <hr>\n        <p> Task Tracker </p>\n        <p> Бочаров Егор Telegram: <a target=\"_blank\" href=\"https://teleg.run/bystepdev\">@egor_bocharov</a></p>\n        <br>\n\n    </div>\n\n"
  ],
  "names": [],
  "mappings": "AACE,UAAU,4BAAC,CAAC,AACV,UAAU,CAAE,MAAM,CAClB,aAAa,CAAE,EAAE,AACnB,CAAC,AACD,UAAU,4BAAC,CAAC,AACV,KAAK,CAAG,IAAI,CACZ,WAAW,CAAG,EAAE,AAClB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,IAAI,AACb,CAAC,AACD,QAAQ,4BAAC,CAAC,AACR,KAAK,CAAG,KAAK,CACb,YAAY,CAAG,IAAI,CACnB,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,EAAE,CACd,eAAe,MAAM,CACrB,UAAU,CAAE,OAAO,CACnB,KAAK,CAAG,IAAI,AACd,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACnC,UAAU,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAChD,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,WAAW,CAAG,GAAG,CACjB,UAAU,CAAG,EAAE,CACf,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,CACnB,MAAM,CAAG,GAAG,CAAC,KAAK,CAAC,IAAI,AACzB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,MAAM,CAAE,IAAI,AACd,CAAC,AACD,WAAW,4BAAC,CAAC,AACX,UAAU,CAAE,EAAE,CACd,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,EAAE,AACjB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,WAAW,CAAE,EAAE,CACf,KAAK,CAAG,IAAI,AACd,CAAC,AACD,OAAO,4BAAC,CAAC,AACP,KAAK,CAAG,KAAK,CACb,YAAY,CAAE,EAAE,AAClB,CAAC,AACD,YAAY,4BAAC,CAAC,AACZ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,GAAG,CACV,MAAM,CAAG,QAAQ,CACjB,WAAW,CAAE,EAAE,AACjB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,YAAY,CAAE,EAAE,CAChB,KAAK,CAAG,GAAG,AACb,CAAC,AACD,QAAQ,4BAAC,CAAC,AACR,KAAK,CAAG,KAAK,CACb,YAAY,CAAG,EAAE,AACnB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,UAAU,CAAE,EAAE,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,AAClD,CAAC,AACD,QAAQ,4BAAC,CAAC,AACR,KAAK,CAAG,KAAK,CACb,KAAK,CAAE,GAAG,CACV,YAAY,CAAG,EAAE,CACjB,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,UAAU,4BAAC,CAAC,AACV,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,EAAE,CACd,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,SAAS,4BAAC,CAAC,AACT,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,GAAG,CACV,YAAY,CAAG,EAAE,CACjB,aAAa,CAAE,IAAI,CACnB,YAAY,CAAE,EAAE,AAClB,CAAC,AACD,IAAI,4BAAC,CAAC,AACJ,UAAU,CAAE,EAAE,CACd,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,EAAE,AACjB,CAAC,AACD,OAAO,4BAAC,CAAC,AACP,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,QAAQ,CAAE,MAAM,AAClB,CAAC,AACD,UAAU,4BAAC,CAAC,AACV,KAAK,CAAG,GAAG,CACX,WAAW,CAAE,EAAE,CACf,UAAU,CAAE,EAAE,CACd,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,aAAa,4BAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,YAAY,CAAE,EAAE,AAClB,CAAC,AACD,OAAO,4BAAC,CAAC,AACP,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,EAAE,AAClB,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,KAAK,CAAE,IAAI,CAAC,UAAU,CACtB,cAAc,CAAE,SAAS,CACzB,eAAe,CAAE,IAAI,CACrB,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,KAAK,CAChB,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,AAC9B,CAAC,AACD,oBAAM,CAAG,oBAAM,CAAC,AACd,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,AACpC,CAAC,AACD,mBAAK,CAAG,MAAM,cAAC,CAAC,AACd,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,AACpC,CAAC,AACD,kCAAM,MAAM,AAAC,CAAC,AACZ,UAAU,CAAE,OAAO,CACnB,cAAc,CAAE,GAAG,CACnB,kBAAkB,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACvD,eAAe,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACpD,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAC3C,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,AAC9B,CAAC,AACD,mBAAK,CAAG,qBAAO,MAAM,AAAC,CAAC,AACrB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,AAC9B,CAAC,AACD,mBAAK,CAAG,OAAO,cAAC,CAAC,AACf,KAAK,CAAE,KAAK,CACZ,YAAY,CAAE,EAAE,CAChB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CAEX,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,AAC9B,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,OAAO,4BAAC,CAAC,AACP,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,GAAG,CACd,aAAa,CAAE,GAAG,AACpB,CAAC"
}